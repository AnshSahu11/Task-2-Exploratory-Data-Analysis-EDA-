# -*- coding: utf-8 -*-
"""Task 2: Exploratory Data Analysis (EDA).ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1R1xLdQGjgztctMO3w49hU4tvGIpZZYL0
"""

# Import the necessary libraries
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns

df = pd.read_csv("/content/Titanic-Dataset.csv")

df.info()

df.isnull().sum()

# Step 2: Handle missing values
# Fill numerical columns with median
num_cols = df.select_dtypes(include=[np.number]).columns
df[num_cols] = df[num_cols].fillna(df[num_cols].median())

# Fill categorical columns with mode
cat_cols = df.select_dtypes(exclude=[np.number]).columns
df[cat_cols] = df[cat_cols].fillna(df[cat_cols].mode().iloc[0])

train =df.head()

train.drop(["PassengerId",'Ticket'],axis = 1,inplace = True)

train.describe()

sns.countplot(x='Survived', data=train);

"""In the training set:

38.3% people survived

More number of people were actually in 3rd class

50% of passengers were in between the age of 20 to 38


Since the survival rate is 0.38, even if I decide to give a submission of all passengers being perished, I would still be having a accuracy of 62%. So accuracy cannot be considered as the only measure in saying how good the model is.
"""

train.groupby(['Survived','Sex'])['Survived'].count()

# Calculate survival counts for males in the full dataset
male_survival_counts = df[df['Sex'] == 'male']['Survived'].value_counts().sort_index()

# Create an explode list with the same length as the survival counts
explode_list = [0.05] * len(male_survival_counts)

# Plot the pie chart
male_survival_counts.plot(kind='pie', figsize=(6, 6), explode=explode_list, autopct='%1.1f%%')
plt.axis('equal')
plt.legend(labels=male_survival_counts.index, title="Survival", loc="center left", bbox_to_anchor=(1, 0, 0.5, 1))
plt.title("Male survival rate")
plt.show()

# Calculate survival counts for females in the full dataset
female_survival_counts = df[df['Sex'] == 'female']['Survived'].value_counts().sort_index()

# Create an explode list with the same length as the survival counts
explode_list = [0.05] * len(female_survival_counts)

# Plot the pie chart
female_survival_counts.plot(kind='pie', autopct='%1.1f%%', figsize=(6, 6), explode=explode_list)
plt.axis('equal')
plt.title("Female survival rate")
plt.legend(labels=female_survival_counts.index, title="Survival", loc="center left", bbox_to_anchor=(1, 0, 0.5, 1))
plt.show()

pd.crosstab(train.Pclass, train.Survived, margins=True)

# Calculate survival counts for first class passengers in the full dataset
pclass1_survival_counts = df[df['Pclass'] == 1]['Survived'].value_counts().sort_index()

# Create an explode list with the same length as the survival counts
explode_list = [0.05] * len(pclass1_survival_counts)

# Plot the pie chart
pclass1_survival_counts.plot(kind='pie', figsize=(6, 6),explode=explode_list,autopct='%1.1f%%')
plt.axis('equal')
plt.legend(["Perished","Survived"])
plt.title("First class survival rate")
plt.show()

# Calculate survival counts for second class passengers in the full dataset
pclass2_survival_counts = df[df['Pclass'] == 2]['Survived'].value_counts().sort_index()

# Create an explode list with the same length as the survival counts
explode_list = [0.05] * len(pclass2_survival_counts)

# Plot the pie chart
pclass2_survival_counts.plot(kind='pie', figsize=(6, 6),explode=explode_list,autopct='%1.1f%%')
plt.axis('equal')
plt.legend(["Perished","Survived"])
plt.title("Second class survival rate")
plt.show()

train[train['Pclass'] == 3].Survived.groupby(train.Survived).count().plot(kind='pie', figsize=(6, 6),explode=[0,0.05],autopct='%1.1f%%')
plt.axis('equal')
plt.legend(["Perished","Survived"])
plt.title("Third class survival rate")
plt.show()

pd.crosstab([train.Sex, train.Survived], train.Pclass, margins=True)

sns.barplot('Pclass','Survived',hue='Sex', data=train)

sns.countplot(x='Survived', data=train,hue = 'Embarked');

pd.crosstab([train.Sex, train.Survived], [train.SibSp, train.Pclass], margins=True)

"""The above crosstab indicates 2 things:

Most of the passerenges didn'y had siblings onboard and the majority had atmost 1 sibling onboard

Not much of priority was given to the passengers who had sibelings onboard in the rescue operation
"""

pd.crosstab([train.Sex, train.Survived], [train.Parch, train.Pclass], margins=True)

# Drop non-numeric columns before calculating correlation
df_numeric = df.drop(['Name', 'Sex', 'Ticket', 'Cabin', 'Embarked'], axis=1)
df_numeric.corr()

train.head(10)

sns.barplot(y = "Fare",x = "Pclass",data = train)

sns.boxplot(y = "Fare",x = "Pclass",data = train[train["Fare"] < 200])

sns.barplot(y = "Fare",x = "Pclass",data = train[train["Fare"] < 200])

sns.pairplot(train.drop("Name",axis = 1).dropna(),hue = "Survived")

train.groupby('Survived').describe()['Age']

def extract(x):
    temp = x.split(" ")
    if "Mr." in temp:
        return "Mr"
    elif "Mrs." in temp:
        return "Mrs"
    elif "Miss." in temp:
        return "Miss"
    elif "Master." in temp:
        return "Master"
    elif "Dr." in temp:
        return "Dr"
    else:
        return None

train["Category"] = train["Name"].apply(extract)

train["Category"].unique()

print("Mr." , np.mean(train[train["Category"] == "Mr"]["Age"]))
print("Mrs." , np.mean(train[train["Category"] == "Mrs"]["Age"]))
print("Miss." , np.mean(train[train["Category"] == "Miss"]["Age"]))
print("Master." , np.mean(train[train["Category"] == "Master"]["Age"]))
print("Dr." , np.mean(train[train["Category"] == "Dr"]["Age"]))

